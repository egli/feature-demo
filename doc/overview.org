#+STARTUP: inlineimages

* Immutant

[[file:images/immutant_logo.jpg]]

* What is Immutant?

  A curated collection of libraries that can be embedded within any
  Clojure application.

  Optionally, the application can be deployed to a stock [[http://wildfly.org][WildFly]]
  application server.

  - web
  - messaging
  - cache
  - transactions
  - scheduling

* Why WildFly?

  - deployment story
  - clustering
  - management interface
    - datasources
    - monitoring

* Using inside Wildfly

  - Use the [[https://github.com/immutant/lein-immutant/tree/2x-dev][lein-immutant]] plugin to create a war

  ~lein immutant war~

* Using outside of WildFly

  - Set a ~:main~ in ~project.clj~, and start with

  ~lein run~

  - just create an uberjar and start with

  ~java -jar foo-standalone.jar~

* Immutant API's

  Functions whose side effects invoke JBoss services

  - immutant.web
  - immutant.messaging
  - immutant.transactions
  - immutant.scheduling
  - immutant.caching

* immutant.web

  - automatic session replication in a cluster
  - websockets
  - server-sent events
  - auto-reloading in dev mode
  - app segmentation via virtual host and/or context path

  examples: [[../src/demo/web.clj][demo/web.clj]]

* immutant.messaging

  - allows publishing and listening to queues/topics
    - using HornetQ
  - supports point-to-point, request-response messaging
  - transactional

  examples: [[../src/demo/messaging.clj][demo/messaging.clj]] and [[../src/demo/remote_messaging_client.clj][demo/remote_messaging_client.clj]]

* immutant.transactions

  - global transactions across db, queues and cache

  examples: [[../src/demo/transactions.clj][demo/transactions.clj]]

* immutant.scheduling

  - schedules specified cron-like or by maps
  - singleton by default (runs on only one node in cluster)
  - not durable

  examples: [[../src/demo/scheduling.clj][demo/scheduling.clj]]

* immutant.caching

  - Infinispan transactional data grid
  - flexible clustering: replicated, invalidated, distributed
  - strong consistency by default, but trades C for A when P
  - eviction, expiration, persistence, conditional writes
  - can be shared with ruby apps in an app server

  examples: [[../src/demo/caching.clj][demo/caching.clj]]
